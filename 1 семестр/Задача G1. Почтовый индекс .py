# Условие
# У Тимофея скоро День рождения! В связи с этим эпохальным событием, он собирается сделать рассылку писем-приглашений. К сожалению, отправить почтовый конверт не так просто, как электронное письмо, необходимо знать точный домашний адрес, а самое главное — почтовый индекс адресата.
# Почтовый индекс состоит из десятичных цифр, для написания которых используется специальный шаблон. Шаблон состоит из 9 пунктирных отрезков, образующих два квадрата с проведенными в них диагоналями (по одной в каждом квадрате). Проводя по ним линии, можно получить различные цифры. Образец написания цифр приведен на рисунке.
# Линии, образующие стороны квадрата, Тимофей называет прямыми, а диагонали квадрата - наклонными. Например, в цифре 9 четыре прямых и одна наклонная линия.
# Сегодня Тимофей должен написать письмо-приглашение своему другу, с которым он познакомился в международном лагере юных программистов, да вот беда - Тимофей совсем забыл его почтовый индекс. Все, что он помнит, так это количество прямых и наклонных линий в его индексе, и то, что он является наименьшим натуральным числом из всех подходящих. Помогите Тимофею! Учтите, что длина индекса в других странах может быть произвольной (а не 6, как в России), а также то, что никакой индекс не может начинаться с нуля.
# Формат входных данных
# В единственной строке через пробел записаны два неотрицательных целых числа a и b — количества прямых и наклонных линий в индексе.
# Формат выходных данных
# Выведете одно натуральное число — наименьший подходящий индекс. Если ни одного подходящего индекса подобрать нельзя, выведите сообщение Wrong.
# Ограничения
# 0≤a≤10^30≤b≤10^2
# Примеры тестов
# №	Стандартный вход	Стандартный выход
# 1	10 1                28
# 2	5 4                 Wrong
# 3	23 5                100236
def find_shortest_path(a, b, slov):
    posl = {(i, j): "-1" for i in range(a + 1) for j in range(b + 1)}
    for string, info in slov.items():
        if string != "0" and info["x"] <= a and info["y"] <= b:
            posl[info["x"], info["y"]] = string
    for i in range(a + 1):
        for j in range(b + 1):
            value = posl[i, j]
            for string, info in slov.items():
                prev_x, prev_y = i - info["x"], j - info["y"]
                if 0 <= prev_x <= a and 0 <= prev_y <= b:
                    prev_num = posl[prev_x, prev_y]
                    this_num = prev_num + string
                    if prev_num != "-1" and (value == "-1" or len(this_num) < len(value) or (len(this_num) == len(value) and this_num < value)):
                        value = this_num
            posl[i, j] = value
    return posl[a, b]

slov = { 
    "0": {"x": 6, "y": 0}, 
    "1": {"x": 2, "y": 1}, 
    "2": {"x": 3, "y": 1}, 
    "3": {"x": 2, "y": 2}, 
    "4": {"x": 4, "y": 0}, 
    "5": {"x": 5, "y": 0}, 
    "6": {"x": 4, "y": 1}, 
    "8": {"x": 7, "y": 0}, 
}
a, b = map(int, input().split())
result = find_shortest_path(a, b, slov)
if result == "-1":
    print("Wrong")
else:
    print(result)