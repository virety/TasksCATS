# Условие
# В детском саду города N для празднования Нового Года установили ёлку и для её украшения закупили K елочных игрушек.
# Елочные игрушки характеризуются двумя параметрами — массой и красотой. Елка характеризуется тремя параметрами — максимальной массой игрушек, которую она может выдержать, красотой, а также максимальной перегрузкой в одну из сторон (максимальная разница между суммарной массой игрушек на левой и на правой стороне). Красота елки равна сумме красот всех висящих на ней игрушек. Так как дети хотят удивить Деда мороза, они хотят как можно красивее украсить ёлку, при этом она не должна упасть.
# Вас просят написать программу, которая по заданным параметрам игрушек и ёлки определит максимально возможную красоту наряженной ёлки.
# Формат входного файла
# Во входном файле содержатся числа MK Δ — соответственно максимальная масса игрушек на ёлке, количество купленных игрушек и максимальное отклонение. За ними следуют K пар чисел viki соответственно вес и красота i-той игрушки.
# Формат выходного файла
# В выходном файле должно содержаться единственное число - максимально возможная красота наряженной ёлки.
# Ограничения
# 1≤К,M≤100 1≤vi,ki≤100 0≤Δ≤20
# Примеры тестов
# №	Входной файл (input.txt)	Выходной файл (output.txt)
# 1	3 2 1                     4
#   1 2
#   2 2
with open("input.txt", "r") as input_file, open("output.txt", "w") as output_file:
  m, k, delta = map(int, input_file.readline().split())
  toys = []
  for _ in range(k):
    w, b = map(int, input_file.readline().split())
    toys.append((w, b))

  t = [[[0 for _ in range(m + 1)] for _ in range(k + 1)] for _ in range(m + 1)]

  for i in range(1, m + 1):
    for j in range(1, k + 1):
      w, b = toys[j - 1]
      for d in range(m + 1):
        p = t[i][j - 1][d]
        if i < m and w <= i:
          q = t[i - w][j - 1][abs(w - d)]
          if w == d or q:
            p = max(p, q + b)
          if w + d <= m:
            s = t[i - w][j - 1][w + d]
            if s:
              p = max(p, s + b)
        elif w <= i:
          if d > 0:
            p = max(p, t[m][j][d - 1])
          h = 0 if d > w else abs(w - d)
          g = min(w + d, m)
          while h <= g:
            q = t[m - w][j - 1][h]
            if h == 0 or q:
              p = max(p, q + b)
            h += 1
        t[i][j][d] = p

  output_file.write(str(t[m][k][min(m, delta)]))