// Условие
// В городе В случилась катастрофа: неожиданно наступила зима. Чтобы облегчить судьбу жителей В, из города М решено направить \(N\) самолётов с тёплой одеждой.
// Самолёты имеют различную скорость, так что самолёт номер \(i\) затратит на полёт в точности \(a_i\) минут. Разгрузка любого самолёта в аэропорту В занимает \(L\) минут, после чего аэропорт готов к приёму следующего самолёта.
// Аэропорт города М большой, и способен оправлять любое необходимое количество самолётов одновременно. Аэропорт города В, напротив, может принимать и разгружать самолёты только по одному.
// Самолёты могут взлетать в любом порядке, но не должны обгонять друг друга в воздухе, т. е. если самолёт \(1\) взлетел раньше самолёта \(2\), то и приземлиться он должен раньше.
// Требуется определить минимальное время в минутах, требуемое на перелёт и разгрузку всех самолётов.
// Формат входного файла
// Входной файла содержит целые числа \(N\,L\), за которыми следуют \(N\) чисел \(a_i\) — времена полёта в минутах.
// Формат выходного файла
// Выходной файл должен содержать число — минимальное время до окончания разгрузки последнего самолёта в минутах.
// Ограничения
// \(1 \le N \le 10000; 1 \le a_i,\,L \le 1000\)
// Примеры тестов
// №	Входной файл (input.txt)	Выходной файл (output.txt)
// 1	2 10                        25
//      8 5

#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    if (*(int*)a < *(int*)b) {
        return -1;
    }
    if (*(int*)a > *(int*)b) {
        return 1;
    }
    return 0;
}

int main() {
    FILE *input = fopen("input.txt", "r");
    FILE *output = fopen("output.txt", "w");
    int N, L;
    fscanf(input, "%d %d", &N, &L);
    int flightTimes[N];
    for (int i = 0; i < N; i++) {
        fscanf(input, "%d", &flightTimes[i]);
    }
    qsort(flightTimes, N, sizeof(int), compare);
    int time = 0;
    for (int i = 0; i < N; i++) {
        if (time > flightTimes[i]) {
            time = time;
        } else {
            time = flightTimes[i];
        }
        time += L;
    }
    fprintf(output, "%d\n", time);
    fclose(input);
    fclose(output);
    return 0;
}